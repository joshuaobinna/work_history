In this assessment, you will use will be tested on your knowledge of javascript
concepts from Section 4 of the video lectures. Answer them in YOUR OWN WORDS.
Fill free to provide examples to help illustrate your train of thought.

1. What are the ways to access methods or properties on an object?
   The use of Dot or Bracket notation/operator.

2. How do you initialize an Object literal?
   By creating an object literal syntax
   Example; let objectLiteral = {};

3. What is a Namespace? How does JavaScript handle Namespacing?
   Namespace is a holder or container for varables and functions. it is used to keep Variables
   variables and functions with the same name seperate.
   JavaScript doesn't have namespacing because of the nature of objects. Objects do the work
   of namespace. The serve as containers for properties, methods and other things needed.

4. What is a JSON? What are some of the Javascript functions used to parse and encode JSON?
   JSON stands for JavaScript Object Notation.
   JSON.stringify()
   JSON.parse()

5. What are first class functions?
   A function is first class if it is treated like other types (Boolean, String, Numbers, Objects).


6. Explain the difference between a function statement and expression.
   Function expression is a unit of code that results in a value and its not compulsory that
   the value is saved inside a variable. A statement on the other hand just does work, it
   doesn't return a value.

7. What does it mean to be passed by value? What types are passed by value?
   This means making two variables the same by referencing or setting equal the value of
   one variable to the other, the value of the initial variable is copied to two separate
   spots/address in the memory.
   Example:  let a = 3;
             let b;
             b = a;
  both variable now have the same value because they've been set equal to each other. the
  value of a now exits in two separate spots of the memory.
  Primitive types(numbers) are passed by value.

8. What does it mean to be passed by reference? What types are passed by reference?
   In by reference two variables point to the same address in the memory. no new memory
   is created unlike by value.
   Example; let d = {season: "winter"};
            let e;
            d = e;
    what happens here is that instead of setting up a new memory space for e, it simply
    points e to the same address that d points to.
   Types passed by reference are all objects(including functions).


9.  What is the `this` variable?
   `this` is a variable that is already available at the global execution context level.
   `this` is a keyword  that points to the global object(window object) even when a
   function is created.
   `this` in methods can be used to address the issue of scope, we use it to access
   properties inside of the same object.


10. What is an array? How are they different in JavaScript than in other languages?
    Arrays are JavaScript way of making lists.
    Array in JavaScript is zero-indexed unlike other languages.
    Arrays in JavaScript are dynamically typed and thus can contain all types of values without
    specifically the  types before hand.

11. What are function arguments? What is the keyword that JavaScript gives you to
    access a function's arguments?
    Function arguments are names given to the parameters passed to a function. they contains
    a list of all the parameters passed to a function. They hold values of parameters passed
    to a function. its just another name for parameters.
    The keyword is called arguments

12. What is an IIFE? How can they be useful?
    This stands for Immediately Invoked Function Expression. They are functions that run as soon as they
    are defined. This has to do with invoking a function immediately after creating it.
    EX. ( let function greeting (name){
             console.log('Hi' + name);
    })(name);

    usefulness are;
    it let's a function to be  run at the point of creation.
    They are used to avoid variable hoisting from within blocks.
    They protect against polluting the global environment
    They also allow public access to methods while retaining privacy for variables defined within
    the function.

13. Explain closures. How can you use them to your advantage in JavaScript?
    Closure is a phenomenon used to explain a situation whereby the execution context closes in all the
    variables its supposed to have access to so that after a function is run and popped off the execution stack,
    it variables is retained in the memory space. this ensures that other functions created can go down the scope
    chain and access the variables of the previously executed function, even if its no longer on the execution stack.
    closures are features of the JavaScript programming language. Its there to make sure that when you run a function
    it works the way it's suppose to.

14. What is a callback function?
    A callback function is a function you give to another function to be run when the other function is finished. So
    you call a function(i.e. invoked it), and you give it your own function and that function call back by calling them
    function you gave when it finishes

15. What does call(), apply() and bind() help you control?
    They control what the `this` key word points to.
